#!/bin/bash

alias Rotator.py="/home/tubman/valmart/scripts/Rotator.py"
alias Rotator.py-debug="/home/shadyvalmart/valmart/scripts/Rotator.py"

clone_rtos() {
  ggit clone http://landshark.ghs.com:8880/sean.wilson/rtosvc.git $@
}

clone_trunk() {
  clone_rtos "$@"
  _dir="rtosvc"
  if [ $# -gt 0 ] ; then
    _dir=$1
  fi

  (cd "$_dir" &&
    git checkout . &&
    ./setup && 
    ./products/integrity_additions_bto.sh)
}

export LOGS="/home/landshark2/sean.wilson/archive/"

recurse_unzip() {
  false
  while [ ! $? -eq 0 ] ; do
    find -name "*.zip" -exec bash -c "unzip \"{}\" && rm \"{}\"" \;
    find -name "*.zip" -exec false {} \;
  done
}

function psilogs() {
  sfx=""
  path="${LOGS}"

  if [ ! "$1" = "" ] ; then
    path="${path}/$1"
  fi

  mkdir -p "${path}" 1>/dev/null 2&>1 
  dir="$(mktemp -d -p ${path} psilogs-XXXXX)"
  printf -- "--summary $dir/summary.log -l $dir/log.log"
}

toolsdir=/home/steeply/valmart/tools/installed/716_201912/current/linux86
alias _gbuild="${toolsdir}/gbuild"
alias _multi="${toolsdir}/multi"

function buildalmostall() {
  _gbuild -cfg=debug "$@" &
  _pids[0]=$!
  _gbuild -cfg=checked "$@" &
  _pids[1]=$!
  _gbuild -cfg=release "$@" &
  _pids[2]=$!

  wait ${_pids[0]}
  wait ${_pids[1]}
  wait ${_pids[2]}
}

function buildall() {
  _gbuild -cfg=debug "$@" &
  _pids[0]=$!
  _gbuild -cfg=checked "$@" &
  _pids[1]=$!
  _gbuild -cfg=release "$@" &
  _pids[2]=$!
  _gbuild -cfg=coverage "$@" &
  _pids[3]=$!
  _gbuild -cfg=mcdc "$@" &
  _pids[3]=$!

  wait ${_pids[0]}
  wait ${_pids[1]}
  wait ${_pids[2]}
  wait ${_pids[3]}
  wait ${_pids[4]}
}

function buildenv() {
  bash -c "cd /home/landshark/sean.wilson/docker-scripts/release-builder/docker && make"
}

# See 'killps' for example of use.
function ask()
{
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

# kill by process name
function killps()
{
    local pid pname sig="-TERM"   # default signal
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: killps [-SIGNAL] pattern"
        return;
    fi
    if [ $# = 2 ]; then sig=$1 ; fi
    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} )
    do
        pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
        if ask "Kill process $pid <$pname> with signal $sig?"
            then kill $sig $pid
        fi
    done
}

# Print colors to the terminal.
function colors() {
    _color(){
        for c; do
            printf '\e[48;5;%dm%03d' $c $c
        done
        printf '\e[0m \n'
    }

    IFS=$' \t\n'
    _color {0..15}
    for ((i=0;i<6;i++)); do
        _color $(seq $((i*36+16)) $((i*36+51)))
    done
    _color {232..255}

}

# Path/Utility functions
unixpath2dos () {
  echo "$1" | sed "s/\//\\\/g"
}
dospath2unix () {
  sed -e 's~\\~/~g' -e 's~J:~/usr~' <<< "$1"
}
path() {
  echo $PATH | tr : "\n"
}
catline() {
  head -n $1 $2 | tail -n 1
}

# Log/productivity functions
function log() {
  v "" --forward -c Log
}

# Diff svn from the branch point
svn_diff_cp () {
  svn diff -r `svn log --stop-on-copy -q | tail -n2 | head -n1 | grep -Eo 'r[0-9]+'`:HEAD
}
svn_clean () {
  svn status | grep ^\? | cut -c9- | xargs -d \\n rm -r
}
alias svnst="svn status -q"
alias svnr="svn resolve --accept working"
alias sup="svn up --non-interactive; echo -e \"\\\\a\"; sleep .25; echo -e \"\\\\a\""

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias ll='ls -l'
alias la='ls -la'

alias ag="ag -U --ignore cscope.out --ignore tags --ignore cscope.po.out --ignore cscope.in.out"
#alias grep="grep --exclude-dir .svn"
alias grep="grep --exclude-dir .svn"

# Typo aliases
alias cd..='cd ..'
alias l='ls'
alias sl='ls'
alias v="$EDITOR -n"
alias retab='vim -s <(echo -e "ggVG:ReplaceTabs\n:CleanWh\nZZ")'
alias pdfreader=evince


# Green Hills
alias locate1='locate -n1'
alias cdi="cd_issue"
alias cda="cd /home/landshark2/sean.wilson/archive"
# alias gbas="sup && ./builds-ep/build_all.sh"
# alias svn16="/archive/subversion/1.6/subversion-1.6.9/subversion/svn/svn"
# alias svn17="/archive/subversion/1.7/subversion-1.7.17/subversion/svn/svn"
# other aliases
alias diffview='meld'
alias dv="diffview"
# alias clgrep='clgrep --rtos'
# alias unigui='${RTOS_DIR}/rtos_val/shared/unival/unigui.py'
# # alias multi='multi -sr_private' # scottr this fails to open BSP directories
# alias mpm='${TOOLS_DIR}/mprojmgr'
# alias ghsgcc='${TOOLS_DIR}/gcc'
# alias mhist="me -historybrowser"
# alias gba="./builds-ep/build_all.sh"
# alias ba="./builds-ep/build_all.sh"
alias printsource="enscript -C -DDuplex:true -DCollate:true -G2rE -f Courier@6 --margins=20:20:15:15"
#alias ivncviewer="/home/integrity/rtos_val/bin/vncviewer/linux86/vncviewer"

function ct() {
  ctags -R --exclude="INTEGRITY-docs" --exclude="manuals" --exclude="python" &
  _pids[0]=$!
  cscope -R -q -b &
  _pids[1]=$!
  wait ${_pids[0]}
  wait ${_pids[1]}
}

function _format_commit_message() {
  svn log -c "$@" http://rtosvc |\
    sed -e 's/Change reviewed by (user ID):.*//' |\
    sed -e 's/Reason for commit policy violation:.*//' |\
    perl -00 -pe 1|\
    sed -e 's/^/> /'
}

function format_commit_messages {
  for cid in $@ ; do
    _format_commit_message $cid
  done
}

function create_trunk_issue() {
  pushd "$BRANCH_DIR"
    mkdir "$1"
    pushd "$1"
      svn co http://rtosvc/trunk/rtos trunk
      cd trunk
        ./setup
        ./products/integrity_additions_bto.sh
}

function co_trunk() {
  svn co http://rtosvc/trunk/rtos trunk
  cd trunk
    ./setup
    ./products/integrity_additions_bto.sh
}

function create_issue() {
  pushd "$BRANCH_DIR"
    mkdir "$1"

    pushd "$1"
      echo "Cloning trunk"
      git-clone-trunk trunk > /dev/null
    popd

    pushd "$1"
      echo "Cloning aptrunk"
      git-clone-aptrunk aptrunk > /dev/null
    popd

    pushd "$1"
      echo "Cloning i117"
      git-clone-i117 i117 > /dev/null
    popd
}

function cd_issue() {
  cd "$BRANCH_DIR/$1"
}


function git-svn-clone() {
  _=$(
    if [ $# -ne 2 ] ; then
      echo "$0 <source-repo> <new-repo>"
      exit 1
    fi

    _GIT_TRUNK="$1"
    _NEW_REPO="$2"

    _SVN_TRUNK="`cd $_GIT_TRUNK && svn info --show-item url`"
    _REVISION="`git -C "$_GIT_TRUNK" svn log --limit 1 | head -n 2| ag "r\d+" -o`"

    git clone "$_GIT_TRUNK" "$_NEW_REPO"
    cd "$_NEW_REPO"
    git fetch origin git-svn:refs/remotes/git-svn
    cp -r "$_GIT_TRUNK/.svn" .
    svn revert -q -R .
    svn update --force -q -r "$_REVISION"
    git checkout --force master --

    git svn init "$_SVN_TRUNK"
    git svn fetch
  )
}

GIT_TRUNK=/home/landshark/sean.wilson/git/origin/trunk
GIT_APTRUNK=/home/landshark/sean.wilson/git/origin/aptrunk
GIT_I117=/home/landshark/sean.wilson/git/origin/i11.7

function git-svn-externals() {
  svn st | ag  "^(    )?X(.*)" | sed  -r 's/^( )*X( )*(.*)/\3/'
}

function git-svn-generate-ignore {
  _TMP_GIT_IGNORE="`mktemp`"

  echo "Generating externals list"
  git-svn-externals > "$_TMP_GIT_IGNORE"
  echo "Appending manual ignores"
  cat .gitignore-manual >> "$_TMP_GIT_IGNORE"
  echo "Generating and appending svn ignore list"
  git svn show-ignore >> "$_TMP_GIT_IGNORE"
  echo "Sorting entries"
  sort "$_TMP_GIT_IGNORE" | uniq > .gitignore
  rm "$_TMP_GIT_IGNORE"
}

function git-clone-aptrunk() {
  git-svn-clone "$GIT_APTRUNK" "$@" && \
  cd "$@" && \
  ./setup && \
  ./products/integrity_additions_multivisor.sh
}
function git-clone-i117() {
  git-svn-clone "$GIT_I117" "$@" && \
  cd "$@" && \
  ./setup && \
  ./products/integrity_additions_multivisor.sh
}
function git-clone-trunk() {
  git-svn-clone "$GIT_TRUNK" "$@" && \
  cd "$@" && \
  ./setup && \
  ./products/integrity_additions_bto.sh
}

function git-svn-update() {
  REV="`git svn log --limit 1 | head -n 2| ag "r\d+" -o`"
  svn revert -q -R . && svn update -q -r "$REV" --force && git checkout --force
}

function git-svn-rebase() {
  git svn fetch && \
  git svn rebase && \
  git-svn-update
}
